//Lorenzo Bracci
//2019-09-24
//This program implements symbol tebles with ordered arrays
public class OrderedarrayST<Key extends Comparable<Key>, Value>{//uses java generics
  private Key[] keys;//array the  stores all the keys
private Value[] vals;//array that stores the value associated with different keys
private int N;//size of the array
public boolean isEmpty(){if(N == 0){return true;}else{return false;}}
public int rank(Key key)//binary search algorithm used to find the index of a key in logN time
{
int lo = 0, hi = N-1;
while (lo <= hi)
{
int mid = lo + (hi - lo) / 2;
int cmp = key.compareTo(keys[mid]);
if (cmp < 0) hi = mid - 1;
else if (cmp > 0) lo = mid + 1;
else return mid;
}
return lo;
}
public Value get(Key key)//gets the value of a certain key
{
if (isEmpty()) return null;
int i = rank(key);//gets the index
if (i < N && keys[i].compareTo(key) == 0) return vals[i];//checks that the index is valid
else return null;
}
public void put(Key key, Value val)
{ // Search for key and update value if found; grow table if new.
int i = rank(key);//if the key doesn t exyist you get the spot where it should be
if (i < N && keys[i].compareTo(key) == 0)//if the key already exists, then update its value
{ vals[i] = val; return; }
for (int j = N; j > i; j--)//swaps all the vlues of the array before the spot where the new element should be
{ keys[j] = keys[j-1]; vals[j] = vals[j-1]; }
keys[i] = key; vals[i] = val;//puts the new key with its value in the right position
N++;//increments the counter for the number of elements
}

}
